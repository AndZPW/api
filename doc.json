{
    "swagger": "2.0",
    "info": {
        "title": "Market Marker API",
        "contact": {},
        "version": "0.0.2"
    },
    "host": "localhost:8080",
    "paths": {
        "/accounts": {
            "post": {
                "description": "Creates a new exchange account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Create exchange account",
                "operationId": "add-exchange-account",
                "parameters": [
                    {
                        "description": "Payload to create an account",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddExchangeAccountReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Refreshes the access and refresh token pair using an existing refresh token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh JWT tokens",
                "responses": {
                    "200": {
                        "description": "Tokens successfully refreshed",
                        "schema": {
                            "$ref": "#/definitions/auth.TokenPair"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/auth/send-code": {
            "post": {
                "description": "Generates and sends a one-time code to the specified email address.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Send confirmation code",
                "parameters": [
                    {
                        "description": "Send Code Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SendCode"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Code sent successfully"
                    },
                    "400": {
                        "description": "Bad Request or invalid email format",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/auth/sign-in-email": {
            "post": {
                "description": "Authenticates a user with an email and code, returning JWT access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign in via email",
                "parameters": [
                    {
                        "description": "Sign In Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SignInWithEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful sign-in. Returns a user object and JWT info",
                        "schema": {
                            "$ref": "#/definitions/model.SignInResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request or invalid email format",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "401": {
                        "description": "Invalid confirmation code",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "404": {
                        "description": "User with this email not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/auth/sign-in-google": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Authenticates an existing user via a Google ID token and returns JWT tokens.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign in via Google",
                "responses": {
                    "200": {
                        "description": "Successful sign-in. Returns a user object and JWT info",
                        "schema": {
                            "$ref": "#/definitions/model.SignInResp"
                        }
                    },
                    "400": {
                        "description": "Email is missing from locals",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "401": {
                        "description": "Google authentication error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/auth/sign-up-email": {
            "post": {
                "description": "Creates a new user by verifying an email and confirmation code.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign up via email",
                "parameters": [
                    {
                        "description": "Sign Up Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SignUpWithEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "401": {
                        "description": "Invalid confirmation code",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (e.g., user already exists)",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/auth/sign-up-google": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new user based on a Google ID token.",
                "tags": [
                    "auth"
                ],
                "summary": "Sign up via Google",
                "responses": {
                    "200": {
                        "description": "User successfully created"
                    },
                    "401": {
                        "description": "Email not found in locals",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (e.g., user already exists)",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/deposits/solana": {
            "post": {
                "description": "Creates a new Solana deposit request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deposits"
                ],
                "summary": "Create Solana deposit",
                "operationId": "deposit-solana",
                "parameters": [
                    {
                        "description": "Deposit request payload",
                        "name": "deposit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DepositSolanaReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Deposit"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/deposits/{id}/status": {
            "get": {
                "description": "Returns the current status of a deposit by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deposits"
                ],
                "summary": "Get deposit status",
                "operationId": "get-deposit-status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Deposit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Deposit"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/exchanges": {
            "get": {
                "description": "Returns all exchanges",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "List exchanges",
                "operationId": "get-exchanges",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Exchange"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "description": "Returns all projects",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List projects",
                "operationId": "get-projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Project"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create project",
                "operationId": "create-project",
                "parameters": [
                    {
                        "description": "Create Project Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateProjectReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Project"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/projects/{id}": {
            "get": {
                "description": "Returns a project by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get project by ID",
                "operationId": "get-project-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Project"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a project by its ID",
                "tags": [
                    "projects"
                ],
                "summary": "Delete project",
                "operationId": "delete-project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the profile data for the user authenticated via a JWT access token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get current user info",
                "responses": {
                    "200": {
                        "description": "User data",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "401": {
                        "description": "Authentication error, claims not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/wallets/solana/generate": {
            "post": {
                "description": "Generates new Solana wallets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Generate Solana wallets",
                "operationId": "generate-solana-wallets",
                "parameters": [
                    {
                        "description": "Generation parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.GenerateWalletsReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Wallet"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        },
        "/wallets/solana/monitor": {
            "post": {
                "description": "Starts monitoring of provided Solana wallets or updates monitoring settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallets"
                ],
                "summary": "Monitor Solana wallets",
                "operationId": "monitor-solana-wallets",
                "parameters": [
                    {
                        "description": "Monitoring parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.MonitorWalletsReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.MonitorWalletsResp"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.AppError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperrors.AppError": {
            "type": "object",
            "properties": {
                "baseError": {},
                "fileErrOccurred": {
                    "type": "string"
                },
                "httpstatus": {
                    "type": "integer"
                },
                "lineErrOccurred": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "auth.TokenPair": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "model.Account": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "exchange_account_id": {
                    "type": "integer"
                },
                "exchange_id": {
                    "type": "integer"
                },
                "exchange_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "passphrase": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                }
            }
        },
        "model.AddExchangeAccountReq": {
            "type": "object",
            "required": [
                "api_key",
                "exchange_id",
                "name",
                "passphrase",
                "secret_key"
            ],
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "exchange_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "passphrase": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                }
            }
        },
        "model.CreateProjectReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Deposit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/model.DepositStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "integer"
                }
            }
        },
        "model.DepositSolanaReq": {
            "type": "object",
            "required": [
                "account_id",
                "amount"
            ],
            "properties": {
                "account_id": {
                    "type": "integer"
                },
                "amount": {
                    "type": "number"
                },
                "wallets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.DepositStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "COMPLETED",
                "FAILED",
                "PARTIAL"
            ],
            "x-enum-varnames": [
                "DepositPending",
                "DepositCompleted",
                "DepositFailed",
                "DepositOrderPartial"
            ]
        },
        "model.Exchange": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.GenerateWalletsReq": {
            "type": "object",
            "required": [
                "count",
                "project_ids",
                "user_id"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 1
                },
                "project_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.MonitorWalletsReq": {
            "type": "object",
            "properties": {
                "before": {
                    "description": "base58 encoded transaction signature",
                    "type": "string"
                },
                "page_size": {
                    "type": "integer"
                },
                "wallet_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.MonitorWalletsResp": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "public_key": {
                    "type": "string"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/solanarpc.WalletTransaction"
                    }
                },
                "wallet_id": {
                    "type": "integer"
                }
            }
        },
        "model.Project": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "wallet_count": {
                    "type": "integer"
                }
            }
        },
        "model.SendCode": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "model.SignInJWTResp": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "model.SignInResp": {
            "type": "object",
            "properties": {
                "jwt_info": {
                    "$ref": "#/definitions/model.SignInJWTResp"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "model.SignInWithEmail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "model.SignUpWithEmail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Wallet": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "private_key": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "solanarpc.WalletTransaction": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "integer"
                },
                "transaction": {
                    "type": "string"
                }
            }
        }
    }
}
